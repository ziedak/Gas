// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "NativeGameplayTags.h"

namespace StateTags
{
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(DEAD);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(DEATH_DYING);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(DEATH_DEAD);

	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(KNOCKED_DOWN);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(INTERACTING);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(INTERACTING_REMOVAL);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(REMOVE_ON_DEATH);
}

namespace AbilityTags
{
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(ABILITY);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(SIMPLE_FAILURE_MESSAGE);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(PLAY_MONTAGE_FAILURE_MESSAGE);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(NOT_CANCELED_BY_STUN);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(BEHAVIOR_SURVIVES_DEATH);

	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(ACTIVATE_FAIL_IS_DEAD);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(ACTIVATE_FAIL_COOLDOWN);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(ACTIVATE_FAIL_COST);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(ACTIVATE_FAIL_TAGS_BLOCKED);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(ACTIVATE_FAIL_TAGS_MISSING);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(ACTIVATE_FAIL_NETWORKING);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(ACTIVATE_FAIL_ACTIVATION_GROUP);
}

namespace InputTags
{
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(MOVE);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(LOOK_MOUSE);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(LOOK_STICK);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(CROUCH);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(AUTORUN);
}

namespace StatusTags
{
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(CROUCHING);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(AUTORUNNING);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(DEATH);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(DEATH_DYING);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(DEATH_DEAD);
}


namespace BaseGameplayTags
{
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(DAMAGE);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(DAMAGE_IMMUNITY);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(DAMAGE_SELF_DESTRUCT);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(FELL_OUT_OF_WORLD);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(GAS_DAMAGE_MESSAGE);
}

namespace GameplayInputTags
{
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(ABILITY_INPUT_BLOCKED);
}

namespace GameplayEventTags
{
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(DEATH);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(RESET);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(REQUEST_RESET);
}

namespace SetByCallerTags
{
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(DAMAGE);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(HEAL);
}

namespace CheatTags
{
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(GODMODE);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(UNLIMITED_HEALTH);
}

namespace DataTags
{
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(DAMAGE);
}

namespace DebuffTags
{
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(STUN);
}

namespace MovementTags
{
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(MODE_WALKING);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(MODE_NAV_WALKING);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(MODE_FALLING);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(MODE_SWIMMING);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(MODE_FLYING);
	ABILITYSYSTEM_API UE_DECLARE_GAMEPLAY_TAG_EXTERN(MODE_CUSTOM);

	// These are mappings from MovementMode enums to GameplayTags associated with those enums (below)
	ABILITYSYSTEM_API extern const TMap<uint8, FGameplayTag> MovementModeTagMap;
	ABILITYSYSTEM_API extern const TMap<uint8, FGameplayTag> CustomMovementModeTagMap;

	ABILITYSYSTEM_API FGameplayTag FindTagByString(const FString& TagString, bool bMatchPartialString = false);
}
